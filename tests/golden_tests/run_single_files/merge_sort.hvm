data Tree = (Leaf x) | (Node x0 x1) 
data List = Nil | (Cons h t)

sort (Leaf v) = (Cons v Nil)
sort (Node a b) = (merge (sort a) (sort b))

merge (Nil) b = b
merge (Cons x xs) (Nil) = (Cons x xs)
merge (Cons x xs) (Cons y ys) = 
  let t = λt (t (Cons x) λx(x) (Cons y))
  let t = (t let lt = (< x y); (match lt { 0: λaλbλcλt(t c a b); +: λaλbλcλt(t a b c) }))
  (t λa λb λc (a (merge (b xs) (c ys))))

sum Nil = 0
sum (Cons h t) = (+ h (sum t))

range n = match n {
  0  : λx (Leaf x)
  +: λx (Node (range n-1 (+ (* x 2) 1)) (range n-1 (* x 2)))
}

main = (sum (sort (range 4 0)))
