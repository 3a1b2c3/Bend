data L = (C h t) | N
data Option = (Some val) | None

tail_tail = @xs match xs {
  (C * (C * t)): t
  *: N
}

or = @dflt @opt match dflt opt {
  * (Some val): val
  dflt *: dflt
}

or2 = @opt @dflt match opt dflt {
  (Some val) *: val
  * dflt: dflt
}

map = @f @opt match f opt {
  f (Some val): (f val)
  * None: None
}

map2 = @f @opt match f opt {
  f (Some val): (f val)
  * val: val
}

flatten = @opt match opt {
  (Some (Some val)): (Some val)
  *: None
}

map_pair = @f @xs @ys match f xs ys {
  * N *: N
  * * N: N
  f (C x xs) (C y ys): (C (f x y) (map_pair xs ys))
}

main = *