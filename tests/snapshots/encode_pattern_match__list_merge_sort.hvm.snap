---
source: tests/golden_tests.rs
input_file: tests/golden_tests/encode_pattern_match/list_merge_sort.hvm
---
(If) = λa #Bool (a λb λc b λd λe e)

(Pure) = λx (Cons x Nil)

(Map) = λa #List_ (a #List_.Cons.head λb #List_.Cons.tail λc λd (Cons (d b) (Map c d)) λe Nil)

(MergeSort) = λcmp λxs (Unpack cmp (Map xs Pure))

(Unpack) = λa λb (#List_ (b #List_.Cons.head λc #List_.Cons.tail λd λe (Unpack$F0 e c d) λf Nil) a)

(MergePair) = λa λb (#List_ (b #List_.Cons.head λc #List_.Cons.tail λd λe (MergePair$F0 e c d) λf Nil) a)

(Merge) = λa λb (#List_ (b #List_.Cons.head λc #List_.Cons.tail λd λe λf (#List_ (f #List_.Cons.head λg #List_.Cons.tail λh λi λj λk (If (i j g) let l = (Cons g h); (Cons j (Merge i k l)) let m = (Cons j k); (Cons g (Merge i m h))) λn λo λp (Cons o p)) e c d) λq λr r) a)

(MergePair$F0) = λa λb λc (#List_ (c #List_.Cons.head λd #List_.Cons.tail λe λf λg (Cons (Merge f g d) (MergePair f e)) λh λi (Cons i Nil)) a b)

(Unpack$F0) = λa λb λc (#List_ (c #List_.Cons.head λd #List_.Cons.tail λe λf λg (Unpack f (MergePair f (Cons g (Cons d e)))) λh λi i) a b)

(Nil) = #List_ λCons #List_ λNil Nil

(Cons) = λhead λtail #List_ λCons #List_ λNil #List_.Cons.tail (#List_.Cons.head (Cons head) tail)

(True) = #Bool λTrue #Bool λFalse True

(False) = #Bool λTrue #Bool λFalse False
