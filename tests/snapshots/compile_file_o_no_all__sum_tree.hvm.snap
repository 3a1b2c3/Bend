---
source: tests/golden_tests.rs
input_file: tests/golden_tests/compile_file_o_no_all/sum_tree.hvm
---
Errors:
Seems like you're trying to run some recursive function(s).
The following functions were written in a way that create recursive cycles that are not compatible with the strict evaluation of HVM.
  * gen -> gen
  * sum -> sum

Due to the ultra-greedy nature of strict-mode, that might result in infinite loops.
You have to refactor these function to use lazy references.

The float-combinators and linearize-matches-extra options can help with doing this automatically.
They are turned on by default, but if you deactivated them, consider re-enabling.

When a function reference is in head position of an application it will be greedly expanded, leading to an infinite loop.
This for example doesn't work: 'Foo = λa λb (b (λc (Foo a c)) a)'
If the application is written as a combinator, it will automatically lifted to a lazy reference, which usually breaks the recursion cycle.
The example as combinators: 'Foo = λa λb (b (λc λa (Foo a c)) (λa a) a)
Alternatively, by using the built-in `data` and `match` syntax, hvm-lang will try to do this automatically.

For let expressions where the variable is non-linear, you can instead employ `use` expressions to statically duplicate the offending recursive term.
(e.g. write 'Foo = λf use x = Foo; (f x x)' instead of 'Foo = λf let x = Foo; (f x x)')

See here for more info: https://github.com/HigherOrderCO/hvm-lang/blob/main/docs/lazy-definitions.md.

You can disable this check altogether with the "-Arecursion-cycle" compiler option.
