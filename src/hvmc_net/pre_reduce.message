Unable to normalize the following functions:
  {not_normal}

This means that they will either loop when run in strict mode, or they are doing intense processing and the compiler wasn't able to ensure that they don't loop.

You can try the following things:

* Enable the 'float-combinators' compiler option if it's not already on (it is by default on strict-mode).

* Use lazy evaluation mode.
  Add the '-L' option when running your program and it will run in lazy-mode. The lazy evaluator supports unrestricted recursion, avoids wasteful work and has better complexity for some programs. It has the downside of an execution overhead and not being compatible with the GPU runtime.

* Increase the computation limit for this check, move the data to the main function, or skip the check altogether for these functions.
  By default, in strict mode the compiler tries to execute each function separately to check for infinite loops. To avoid consuming too much time and memory there is a limit on how much computation each function can do and these functions have passed that limit.
  This could be intentional, the functions can be calculating a really hard constant or generating a lot of data, for example. In these cases, you can avoid this check for these specific functions by moving their data to "main", where recursion is not allowed, or by skipping this check by adding the "--pre-reduce-skip=<function name>" compiler option.
  You can also increase the computation limit for this check with "--pre-reduce-max-rewrites=<amount>". The default value is {max_rewrites}.

* Refactor the program to use lazy references.
  If these functions are not supposed to be doing 

You can disable this check altogether with the "-Arecursion-pre-reduce" compiler option.