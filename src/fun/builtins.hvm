data String = (cons head ~tail) | (nil)
data List   = (cons head ~tail) | (nil)
data Result = (ok val) | (err val)
data Nat    = (succ ~pred) | (zero)
data Map    = (node value ~left ~right) | (leaf)

Map/empty = Map/leaf

Map/get map key =
  match map {
    Map/leaf: (*, map)
    Map/node:
      switch _ = (== 0 key) {
        0: switch _ = (% key 2) {
          0:
            let (got, rest) = (Map/get map.left (/ key 2))
            (got, (Map/node map.value rest map.right))
          _:
            let (got, rest) = (Map/get map.right (/ key 2))
            (got, (Map/node map.value map.left rest))
        }
        _: (map.value, map)
      }
  }

Map/set map key value =
  match map {
    Map/node:
      switch _ = (== 0 key) {
        0: switch _ = (% key 2) {
          0: (Map/node map.value (Map/set map.left (/ key 2) value) map.right)
          _: (Map/node map.value map.left (Map/set map.right (/ key 2) value))
        }
        _: (Map/node value map.left map.right)
      }
    Map/leaf:
      switch _ = (== 0 key) {
        0: switch _ = (% key 2) {
          0: (Map/node * (Map/set Map/leaf (/ key 2) value) Map/leaf)
          _: (Map/node * Map/leaf (Map/set Map/leaf (/ key 2) value))
        }
        _: (Map/node value Map/leaf Map/leaf)
      }
  }
