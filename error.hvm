data Bool
  = True
  | False

data Tree
  = (N x y)
  | L

(And a b) = match a {
  True: b
  False: False
}

(equal a b) = match a {
  N: match b {
    N: (And (equal a.x b.x) (equal a.y b.y))
    L: False
  }
  L: match b {
    N: False
    L: True
  }
}

data Maybe
  = None
  | (Some value)

(join None     b) = b
(join (Some a) b) = (Some a)

(view n) = (n λx λe match e { False: None; True: (Some x) })

(B n) = match n {
  0: L
  +: {L (N (B n-1) (B n-1))}
}

main =
  let a = (N L (N L L))
  let b = (B 4)
  (view λt(t b (equal a b)))